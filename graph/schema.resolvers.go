package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.61

import (
	"context"
	"slices"

	"stepbystep.com/m/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	user := &model.User{
		ID:   input.UserID,
		Name: "Baba",
	}

	listOfTodos = append(listOfTodos, &model.Todo{
		ID:   input.UserID,
		Text: input.Text,
		Done: false,
		User: user,
	})

	return &model.Todo{
		ID:   input.UserID,
		Text: input.Text,
		Done: false,
		User: user,
	}, nil
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, input string) (string, error) {
	for i, todo := range listOfTodos {
		if todo.ID == input {
			slices.Delete(listOfTodos, i, i+1)
			return "successfully deleted", nil
		}
	}

	return "unable to delete", nil
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	user := &model.User{
		ID:   input.UserID,
		Name: "Baba",
	}

	for i, todo := range listOfTodos {
		if todo.ID == input.UserID {
			slices.Delete(listOfTodos, i, i+1)
			listOfTodos = append(listOfTodos, &model.Todo{
				ID:   input.UserID,
				Text: input.Text,
				Done: false,
				User: user,
			})
		}
	}

	return &model.Todo{
		ID:   input.UserID,
		Text: input.Text,
		Done: false,
		User: user,
	}, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return listOfTodos, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

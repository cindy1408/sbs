package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.61

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"stepbystep.com/m/graph/model"
)

func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	var user model.User

	// Fetch the User to ensure it exists
	if err := r.Db.First(&user, "id = ?", input.UserID).Error; err != nil {
		return nil, fmt.Errorf("user not found: %w", err)
	}

	// Create the Todo object and associate it with the User
	todo := &model.Todo{
		ID:     uuid.NewString(),
		Text:   input.Text,
		Done:   false,
		UserID: input.UserID,
		User:   &user, // Associate the User object directly with the Todo
	}

	// Create the Todo in the database
	if result := r.Db.Create(todo); result.Error != nil {
		return nil, result.Error
	}

	return todo, nil
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, input string) (string, error) {
	row := r.Db.Delete(&model.Todo{}, input)

	if row.RowsAffected == 0 {
		return "", fmt.Errorf("unable to delete")
	}

	return "deleted successfully", nil
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	row := r.Db.Save(&input)
	if row.RowsAffected == 0 {
		return nil, fmt.Errorf("unable to update")
	}

	return &model.Todo{
		ID:   input.UserID,
		Text: input.Text,
		Done: false,
	}, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	user := &model.User{
		ID:   input.ID,
		Name: input.Name,
	}

	if r.Db == nil {
		return nil, fmt.Errorf("no db")
	}
	result := r.Db.Create(user)
	if result.Error != nil {
		return nil, result.Error
	}

	return user, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	var todos []*model.Todo

	result := r.Db.Find(&todos)
	if result.Error != nil {
		return nil, fmt.Errorf("error querying todos: %w", result.Error)
	}

	if result.RowsAffected == 0 {
		return nil, fmt.Errorf("no rows returned")
	}

	return todos, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
